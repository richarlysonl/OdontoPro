// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Apointment {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  date      DateTime //data dl agendamento
  time      String //hora do agendamento
  serviceId String
  userId    String
  status    Boolean  @default(false)
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Remimber {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String       @id @default(uuid())
  name        String
  price       Int //float
  duration    Int //em minutos
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  apointments Apointment[] //relação onde 1 pode ter varios agendamentos
  status      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum plan {
  basic
  professional
}

model Subscription {
  id        String   @id @default(uuid())
  status    String
  plan      plan
  priceId   String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  subscriptionId      Subscription? //relação onde 1 pode ter 1 assinatura
  services            Service[] //relação onde 1 pode ter varios serviços
  remimbers           Remimber[] //relação onde 1 pode ter varios lembretes
  apointments         Apointment[] //relação onde 1 pode ter varios agendamentos
  adress              String?         @default("")
  phone               String?         @default("")
  status              Boolean         @default(true)
  timeZone            String?         @default("UTC")
  striper_customer_id String?         @default("")
  times               String[]        @default([])
  accounts            Account[]
  sessions            Session[]
  // Optional for WebAuthn support
  Authenticator       Authenticator[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
